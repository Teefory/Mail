//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1573, 1591

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : Mail
	/// Data Source    : DESKTOP-VDN1A2V\SQLEXPRESS
	/// Server Version : 15.00.2116
	/// </summary>
	public partial class MailDB : LinqToDB.Data.DataConnection
	{
		public ITable<Client>           Clients           { get { return this.GetTable<Client>(); } }
		public ITable<Employee>         Employees         { get { return this.GetTable<Employee>(); } }
		public ITable<Parcel>           Parcels           { get { return this.GetTable<Parcel>(); } }
		public ITable<PostalDepartment> PostalDepartments { get { return this.GetTable<PostalDepartment>(); } }
		public ITable<Status>           Status            { get { return this.GetTable<Status>(); } }
		public ITable<StatusReference>  StatusReferences  { get { return this.GetTable<StatusReference>(); } }
		public ITable<Types>             Typeses             { get { return this.GetTable<Types>(); } }

		public MailDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MailDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MailDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public MailDB(DataOptions<MailDB> options)
			: base(options.Options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table(Schema="dbo", Name="Client")]
	public partial class Client
	{
		[PrimaryKey, Identity   ] public int      ClientId   { get; set; } // int
		[Column,     NotNull    ] public string   Name       { get; set; } // varchar(20)
		[Column,     NotNull    ] public string   Surname    { get; set; } // varchar(20)
		[Column,     NotNull    ] public string   Patronymic { get; set; } // varchar(20)
		[Column,     NotNull    ] public DateTime ВirthDate  { get; set; } // date
		[Column,        Nullable] public string   Number     { get; set; } // char(11)
		[Column,        Nullable] public string   Address    { get; set; } // varchar(50)

		#region Associations

		/// <summary>
		/// FK_Package_Client_BackReference (dbo.Parcel)
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Sender", CanBeNull=true)]
		public IEnumerable<Parcel> Packages { get; set; }

		/// <summary>
		/// FK_Parcel_Client_BackReference (dbo.Parcel)
		/// </summary>
		[Association(ThisKey="ClientId", OtherKey="Recipient", CanBeNull=true)]
		public IEnumerable<Parcel> Parcels { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Employee")]
	public partial class Employee
	{
		[PrimaryKey, Identity   ] public int    EmployeeId         { get; set; } // int
		[Column,     NotNull    ] public string Name               { get; set; } // varchar(20)
		[Column,     NotNull    ] public string Surname            { get; set; } // varchar(20)
		[Column,     NotNull    ] public string Patronymic         { get; set; } // varchar(20)
		[Column,     NotNull    ] public string Post               { get; set; } // varchar(20)
		[Column,        Nullable] public string Number             { get; set; } // char(11)
		[Column,     NotNull    ] public int    PostalDepartmentId { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Employee_PostalDepartment (dbo.PostalDepartment)
		/// </summary>
		[Association(ThisKey="PostalDepartmentId", OtherKey="PostalDepartmentId", CanBeNull=false)]
		public PostalDepartment PostalDepartment { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Parcel")]
	public partial class Parcel
	{
		[Column(),                  PrimaryKey, Identity] public int ParcelId       { get; set; } // int
		[Column(),                  NotNull             ] public int Sender         { get; set; } // int
		[Column(),                  NotNull             ] public int Recipient      { get; set; } // int
		[Column("Place_departure"), NotNull             ] public int PlaceDeparture { get; set; } // int
		[Column("Place_arrival"),   NotNull             ] public int PlaceArrival   { get; set; } // int
		[Column(),                  NotNull             ] public int Type           { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Parcel_Client (dbo.Client)
		/// </summary>
		[Association(ThisKey="Recipient", OtherKey="ClientId", CanBeNull=false)]
		public Client Client { get; set; }

		/// <summary>
		/// FK_Parcel_PostalDepartment1 (dbo.PostalDepartment)
		/// </summary>
		[Association(ThisKey="PlaceDeparture", OtherKey="PostalDepartmentId", CanBeNull=false)]
		public PostalDepartment FkParcelPostalDepartment1 { get; set; }

		/// <summary>
		/// FK_Parcel_Type (dbo.Type)
		/// </summary>
		[Association(ThisKey="Type", OtherKey="TypeId", CanBeNull=false)]
		public Type FkParcelType { get; set; }

		/// <summary>
		/// FK_Package_Client (dbo.Client)
		/// </summary>
		[Association(ThisKey="Sender", OtherKey="ClientId", CanBeNull=false)]
		public Client PackageClient { get; set; }

		/// <summary>
		/// FK_Parcel_PostalDepartment (dbo.PostalDepartment)
		/// </summary>
		[Association(ThisKey="PlaceArrival", OtherKey="PostalDepartmentId", CanBeNull=false)]
		public PostalDepartment PostalDepartment { get; set; }

		/// <summary>
		/// FK_Status_Parcel_BackReference (dbo.Status)
		/// </summary>
		[Association(ThisKey="ParcelId", OtherKey="ParcelId", CanBeNull=true)]
		public IEnumerable<Status> Status { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="PostalDepartment")]
	public partial class PostalDepartment
	{
		[PrimaryKey, Identity] public int    PostalDepartmentId { get; set; } // int
		[Column,     NotNull ] public string Address            { get; set; } // varchar(50)
		[Column,     NotNull ] public string Number             { get; set; } // char(11)

		#region Associations

		/// <summary>
		/// FK_Employee_PostalDepartment_BackReference (dbo.Employee)
		/// </summary>
		[Association(ThisKey="PostalDepartmentId", OtherKey="PostalDepartmentId", CanBeNull=true)]
		public IEnumerable<Employee> Employees { get; set; }

		/// <summary>
		/// FK_Parcel_PostalDepartment1_BackReference (dbo.Parcel)
		/// </summary>
		[Association(ThisKey="PostalDepartmentId", OtherKey="PlaceDeparture", CanBeNull=true)]
		public IEnumerable<Parcel> ParcelPostalDepartments { get; set; }

		/// <summary>
		/// FK_Parcel_PostalDepartment_BackReference (dbo.Parcel)
		/// </summary>
		[Association(ThisKey="PostalDepartmentId", OtherKey="PlaceArrival", CanBeNull=true)]
		public IEnumerable<Parcel> Parcels { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Status")]
	public partial class Status
	{
		[PrimaryKey, Identity] public int      StatusId          { get; set; } // int
		[Column,     NotNull ] public int      ParcelId          { get; set; } // int
		[Column,     NotNull ] public int      StatusReferenceId { get; set; } // int
		[Column,     NotNull ] public DateTime DateStatus        { get; set; } // date

		#region Associations

		/// <summary>
		/// FK_Status_Parcel (dbo.Parcel)
		/// </summary>
		[Association(ThisKey="ParcelId", OtherKey="ParcelId", CanBeNull=false)]
		public Parcel Parcel { get; set; }

		/// <summary>
		/// FK_Status_StatusReference (dbo.StatusReference)
		/// </summary>
		[Association(ThisKey="StatusReferenceId", OtherKey="StatusReferenceId", CanBeNull=false)]
		public StatusReference StatusReference { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="StatusReference")]
	public partial class StatusReference
	{
		[PrimaryKey, Identity] public int    StatusReferenceId { get; set; } // int
		[Column,     NotNull ] public string Name              { get; set; } // varchar(20)

		#region Associations

		/// <summary>
		/// FK_Status_StatusReference_BackReference (dbo.Status)
		/// </summary>
		[Association(ThisKey="StatusReferenceId", OtherKey="StatusReferenceId", CanBeNull=true)]
		public IEnumerable<Status> Status { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Types")]
	public partial class Types
	{
		[PrimaryKey, Identity   ] public int     TypeId  { get; set; } // int
		[Column,     NotNull    ] public bool    Fragile { get; set; } // bit
		[Column,        Nullable] public int?    Volume  { get; set; } // int
		[Column,        Nullable] public int?    Weight  { get; set; } // int
		[Column,     NotNull    ] public decimal Price   { get; set; } // decimal(10, 2)

		#region Associations

		/// <summary>
		/// FK_Parcel_Type_BackReference (dbo.Parcel)
		/// </summary>
		[Association(ThisKey="TypeId", OtherKey="Type", CanBeNull=true)]
		public IEnumerable<Parcel> Parcels { get; set; }

		#endregion
	}

	public static partial class MailDBStoredProcedures
	{
		#region SpAlterdiagram

		public static int SpAlterdiagram(this MailDB dataConnection, string @diagramname, int? @ownerId, int? @version, byte[] @definition)
		{
			var parameters = new []
			{
				new DataParameter("@diagramname", @diagramname, LinqToDB.DataType.NVarChar)
				{
					Size = 128
				},
				new DataParameter("@owner_id",    @ownerId,     LinqToDB.DataType.Int32),
				new DataParameter("@version",     @version,     LinqToDB.DataType.Int32),
				new DataParameter("@definition",  @definition,  LinqToDB.DataType.VarBinary)
				{
					Size = -1
				}
			};

			return dataConnection.ExecuteProc("[dbo].[sp_alterdiagram]", parameters);
		}

		#endregion

		#region SpCreatediagram

		public static int SpCreatediagram(this MailDB dataConnection, string @diagramname, int? @ownerId, int? @version, byte[] @definition)
		{
			var parameters = new []
			{
				new DataParameter("@diagramname", @diagramname, LinqToDB.DataType.NVarChar)
				{
					Size = 128
				},
				new DataParameter("@owner_id",    @ownerId,     LinqToDB.DataType.Int32),
				new DataParameter("@version",     @version,     LinqToDB.DataType.Int32),
				new DataParameter("@definition",  @definition,  LinqToDB.DataType.VarBinary)
				{
					Size = -1
				}
			};

			return dataConnection.ExecuteProc("[dbo].[sp_creatediagram]", parameters);
		}

		#endregion

		#region SpDropdiagram

		public static int SpDropdiagram(this MailDB dataConnection, string @diagramname, int? @ownerId)
		{
			var parameters = new []
			{
				new DataParameter("@diagramname", @diagramname, LinqToDB.DataType.NVarChar)
				{
					Size = 128
				},
				new DataParameter("@owner_id",    @ownerId,     LinqToDB.DataType.Int32)
			};

			return dataConnection.ExecuteProc("[dbo].[sp_dropdiagram]", parameters);
		}

		#endregion

		#region SpHelpdiagramdefinition

		public static IEnumerable<SpHelpdiagramdefinitionResult> SpHelpdiagramdefinition(this MailDB dataConnection, string @diagramname, int? @ownerId)
		{
			var parameters = new []
			{
				new DataParameter("@diagramname", @diagramname, LinqToDB.DataType.NVarChar)
				{
					Size = 128
				},
				new DataParameter("@owner_id",    @ownerId,     LinqToDB.DataType.Int32)
			};

			return dataConnection.QueryProc<SpHelpdiagramdefinitionResult>("[dbo].[sp_helpdiagramdefinition]", parameters);
		}

		public partial class SpHelpdiagramdefinitionResult
		{
			[Column("version")   ] public int?   Version    { get; set; }
			[Column("definition")] public byte[] Definition { get; set; }
		}

		#endregion

		#region SpHelpdiagrams

		public static IEnumerable<SpHelpdiagramsResult> SpHelpdiagrams(this MailDB dataConnection, string @diagramname, int? @ownerId)
		{
			var parameters = new []
			{
				new DataParameter("@diagramname", @diagramname, LinqToDB.DataType.NVarChar)
				{
					Size = 128
				},
				new DataParameter("@owner_id",    @ownerId,     LinqToDB.DataType.Int32)
			};

			return dataConnection.QueryProc<SpHelpdiagramsResult>("[dbo].[sp_helpdiagrams]", parameters);
		}

		public partial class SpHelpdiagramsResult
		{
			public string Database { get; set; }
			public string Name     { get; set; }
			public int    ID       { get; set; }
			public string Owner    { get; set; }
			public int    OwnerID  { get; set; }
		}

		#endregion

		#region SpRenamediagram

		public static int SpRenamediagram(this MailDB dataConnection, string @diagramname, int? @ownerId, string @newDiagramname)
		{
			var parameters = new []
			{
				new DataParameter("@diagramname",     @diagramname,    LinqToDB.DataType.NVarChar)
				{
					Size = 128
				},
				new DataParameter("@owner_id",        @ownerId,        LinqToDB.DataType.Int32),
				new DataParameter("@new_diagramname", @newDiagramname, LinqToDB.DataType.NVarChar)
				{
					Size = 128
				}
			};

			return dataConnection.ExecuteProc("[dbo].[sp_renamediagram]", parameters);
		}

		#endregion

		#region SpUpgraddiagrams

		public static int SpUpgraddiagrams(this MailDB dataConnection)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_upgraddiagrams]");
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region FnDiagramobjects

		[Sql.Function(Name="[dbo].[fn_diagramobjects]", ServerSideOnly=true)]
		public static int? FnDiagramobjects()
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Client Find(this ITable<Client> table, int ClientId)
		{
			return table.FirstOrDefault(t =>
				t.ClientId == ClientId);
		}

		public static Employee Find(this ITable<Employee> table, int EmployeeId)
		{
			return table.FirstOrDefault(t =>
				t.EmployeeId == EmployeeId);
		}

		public static Parcel Find(this ITable<Parcel> table, int ParcelId)
		{
			return table.FirstOrDefault(t =>
				t.ParcelId == ParcelId);
		}

		public static PostalDepartment Find(this ITable<PostalDepartment> table, int PostalDepartmentId)
		{
			return table.FirstOrDefault(t =>
				t.PostalDepartmentId == PostalDepartmentId);
		}

		public static Status Find(this ITable<Status> table, int StatusId)
		{
			return table.FirstOrDefault(t =>
				t.StatusId == StatusId);
		}

		public static StatusReference Find(this ITable<StatusReference> table, int StatusReferenceId)
		{
			return table.FirstOrDefault(t =>
				t.StatusReferenceId == StatusReferenceId);
		}

		public static Types Find(this ITable<Types> table, int TypeId)
		{
			return table.FirstOrDefault(t =>
				t.TypeId == TypeId);
		}
	}
}
